
'use strict';
var fs = require('fs');
var path = require('path');
var cipher = require('./cipher');
var calculations = require('./calculation');
// base directory
var appDir = (path.dirname(require.main.filename)).replace(/\/bin$/g,'');

// sort object by value
var sortByValue = function(data,key){
	data.sort(function(){
		function sortFunction(a, b) {
			if (a[key] === b[key]) {
				return 0;
			}
			else {
				return (a[key] < b[key]) ? -1 : 1;
			}
		}
	});
};
var symbol = function(value){
	var newNumber = (parseFloat(value).toFixed(2)).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	return 'PHP ' + newNumber;
}
var func = {
	file: global.__.file_status,
	set: function(p){
		try{
			// routes list
			var files = global.hmvc.routes;
			for(var x=0,c = files.length;x<c;x++){
				var file = files[x];
				var split = file.router.split('/')
				var perm = '/'+split[0]; // setup permalink
				var formHtml='';
				var forClass = split[0]; // body class to identify per page
				if(split.length < 2){
					split[1] = split[0];
				} else {
					perm += '/'+split[1];
					forClass += "-"+split[1];
				}
				// core modules location
				var core = appDir+'/modules/core/' +split[0]+ '/routes/'+split[1] + '.js';
				// local modules location
				var local = appDir+'/modules/local/' +split[0]+ '/routes/'+split[1] + '.js';
				
				// get location directory
				if(this.file(local)) {
					var location = appDir+'/modules/local/';
				} else if (this.file(core)) {
					var location = appDir+'/modules/core/';
				}
				if(location) {
					// module location
					var module = location+split[0];
					if(this.file(module+'/views/form/' + split[1] + '.ejs')) {
						formHtml = module+'/views/form/' + split[1] + '.ejs';
					}
					// parameters sent to every routes
					var data = {
						permalink:perm, // routes permalink
						"sortByValue":sortByValue,
						'access':{
							'denied':function(req,res,next){res.status(403).send({status:false,'title':'Page',message:"Access Denied!"});},
							'notFound':function(req,res,next){res.sendStatus(404);}
						},
						template:new require('./template')({title:file.title,dir:appDir,form:formHtml,"class":forClass,symbol:symbol}),
						cipher:cipher,
						calculations:calculations,
						module:module, // module directory
						html: module+'/views/', //module ejs location
						router:require('express').Router(),
						symbol:symbol,
						helper:global.hmvc.helper[split[0]], // helpers of current module
						models:global.hmvc.models[split[0]] // modules of current module
					}
					// set home page
					if(perm.replace('/','') == global.__.config.homepage) {
						p.use('/',require(module+'/routes/'+split[1])(data));
					} else {
						// global.__.pages[global.__.pages.length] = {permalink:perm,title:file.title};
						p.use(perm,require(module+'/routes/'+split[1])(data));
					}
				}
			}
		} catch(err) {
			console.log(err+"\n\nAn error occured. \nUsage: hmvc.init(<your-app>,[set-of-array]);");
			process.exit();
		}
	}
}
module.exports  = func;
/*
|
|--------------------------------------------
| TBM HMVC CORE
| -Do not edit this file-
|
| Library file for all routes
| Path: lib/
| File: index.js
|--------------------------------------------
|
*/
